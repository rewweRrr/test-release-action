name: ⚠️ Create release

on:
  workflow_dispatch:
    inputs:
      bump:
        type: choice
        description: 'release type'
        required: true
        default: patch
        options:
          - patch
          - minor
          - major

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  create-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout dev branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: dev

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install dependencies
        run: npm ci

      - name: Generate release files (TypeScript)
        id: gen
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          INPUT_BUMP: ${{ github.event.inputs.bump }}
        run: |
          set -euo pipefail
          npx tsx scripts/create-release.ts

          if [ ! -f release-info.json ]; then
            echo "release-info.json not found"
            exit 1
          fi

          cat release-info.json

          VERSION=$(jq -r .version release-info.json)
          RELEASE_NAME=$(jq -r .release_name release-info.json)
          TAG=$(jq -r .tag release-info.json)
          CHANGELOG=$(jq -r .changelog release-info.json)

          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "release_name=$RELEASE_NAME" >> "$GITHUB_OUTPUT"
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          echo "changelog<<EOF" >> "$GITHUB_OUTPUT"
          printf '%s\n' "$CHANGELOG" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Commit release files
        uses: EndBug/add-and-commit@v9
        with:
          default_author: github_actions
          message: "chore(release): v${{ steps.gen.outputs.version }}"

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1.18.0
        with:
          name: Release v${{ steps.gen.outputs.version }}
          tag: ${{ steps.gen.outputs.tag }}
          commit: ${{ github.head_ref || github.ref_name }}
          body: ${{ steps.gen.outputs.changelog }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Pull Request from dev to main
        id: cprdm
        run: |
          PR_LINK=$(gh pr create \
            --base "main" --head "dev" \
            --label "release" \
            --title "${{ steps.gen.outputs.release_name }}" \
            --body "${{ steps.gen.outputs.changelog }}")
          echo "pull_request_link=$PR_LINK" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Enable Dev to Main Pull Request Automerge
        run: gh pr merge --merge --auto "${{ steps.cprdm.outputs.pull_request_link }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check PR Status
        id: cprs
        run: |
          PR_VIEW=$(gh pr view "${{ steps.cprdm.outputs.pull_request_link }}" \
          --json "state,body,title")
          
          STATE=$(jq -r .state $PR_VIEW)
          
          if [ "$STATE" != "MERGED" ]; then
            echo "PR ${{ steps.cprdm.outputs.pull_request_link }} not merged (merged=$STATE). Exiting with error."
            exit 1
          fi
          
          BODY=$(jq -r .body $PR_VIEW)
          TITLE=$(jq -r .title $PR_VIEW)
          
          echo "pull_request_body=$BODY" >> "$GITHUB_OUTPUT"
          echo "pull_request_title=$TITLE" >> "$GITHUB_OUTPUT"

      - name: Run Integration Release with Weeek
        run: npx tsx scripts/weeek-release.ts
        env:
          WEEEK_API_KEY: ${{ secrets.WEEEK_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_PR_BODY: ${{ steps.cprs.outputs.pull_request_body }}
          GITHUB_PR_TITLE: ${{ steps.cprs.outputs.pull_request_title }}


